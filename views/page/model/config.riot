<page-model-config>
  <div>
    <div class="mb-3">
      <label class="form-label">
        Grid Form
      </label>
      <eden-select on-change={ (e, val) => onForms(val) } ref={ ref('forms') } placeholder="Select Form" data={ getForms() } multiple={ true } />
      <small>
        The forms that this grid will filter by.
      </small>
    </div>

    <div if={ props.page.get('data.forms.0') }>
      <hr />
        
      <div class="mb-3">
        <label class="form-label">
          Group Field
        </label>
        <eden-select on-change={ (e, val) => onGroup(val) } ref={ ref('group') } placeholder="Select Group Field" data={ getGroup() } />
        <small>
          Selecting a tag field will group the grid by this field.
        </small>
      </div>
        
      <div class="mb-3">
        <label class="form-label">
          Tag Field
        </label>
        <eden-select on-change={ (e, val) => onTag(val) } ref={ ref('tag') } placeholder="Select Tag Field" data={ getTag() } />
        <small>
          Selecting a tag field will allow you to tag tasks.
        </small>
      </div>
        
      <div class="mb-3">
        <label class="form-label">
          User Field
        </label>
        <eden-select on-change={ (e, val) => onUser(val) } ref={ ref('user') } placeholder="Select User Field" data={ getUser() } />
        <small>
          Selecting a user field will allow you to assign tasks to that user.
        </small>
      </div>
        
      <div class="mb-3">
        <label class="form-label">
          Filter By
        </label>

        <dashup-query fields={ props.context.fields } on-change={ (val) => onFilter(val) } value={ props.page.get('data.filter') ? JSON.parse(props.page.get('data.filter')) : [] } />
      </div>
    </div>
  </div>

  <script>
    // export default
    export default class PageModelConfig {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       */
      onBeforeMount() {
        // bind methods
        this.onTag = this.onTag.bind(this);
        this.onUser = this.onUser.bind(this);
        this.onForms = this.onForms.bind(this);
        this.onFilter = this.onFilter.bind(this);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // EVENT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on model
       */
      onForms(vals) {
         // forms
        if (!vals) vals = this.refs.forms.val();
        if (!vals) vals = [];
        if (!Array.isArray(vals)) vals = [vals];

        // set model
        this.props.data('forms', vals);
      }

      /**
       * on model
       */
      onTag(val) {
        // get value
        if (!val) val = this.refs.tag.val();
      
        // set model
        this.props.data('tag', val);
      }

      /**
       * on model
       */
      onUser(val) {
        // check value
        if (!val) val = this.refs.user.val();
        
        // set model
        this.props.data('user', val);
      }

      /**
       * on model
       */
      onGroup(val) {
        // set model
        this.props.data('group', val || null);
      }

      /**
       * on model
       */
      onFilter(val) {
        // set model
        this.props.data('filter', JSON.stringify(val));
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // GET METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get value
       */
      getForms() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form' && page.get('data.model') === this.props.page.get('_id');
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : (this.props.page.get('data.forms') || []).includes(page.get('_id')),
          };
        });
      }

      /**
       * get field
       */
      getTag() {
        // return value
        return [...(this.props.context.fields)].filter((field) => ['select', 'checkbox'].includes(field.type)).map((field) => {
          // return fields
          return {
            name     : field.label || field.name,
            value    : field.uuid,
            selected : this.props.page.get('data.tag') === field.uuid,
          };
        });
      }

      /**
       * get field
       */
      getUser() {
        // return value
        return [...(this.props.context.fields)].filter((field) => ['user'].includes(field.type)).map((field) => {
          // return fields
          return {
            name     : field.label || field.name,
            value    : field.uuid,
            selected : this.props.page.get('data.user') === field.uuid,
          };
        });
      }

      /**
       * get field
       */
      getGroup() {
        // return value
        return [...(this.props.context.fields)].filter((field) => ['select', 'checkbox'].includes(field.type)).map((field) => {
          // return fields
          return {
            name     : field.label || field.name,
            value    : field.uuid,
            selected : this.props.page.get('data.group') === field.uuid,
          };
        });
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-model-config>