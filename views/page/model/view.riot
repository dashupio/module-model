<page-model-view>
  <div>
    <div if={ loading('grid') } class="text-center my-5 py-5">
      <i class="fa fa-spin fa-spinner h1" />
    </div>
    <div if={ !loading('grid') && getForms()[0] } class="dashup-grid">
      <dashup-view view="grid" type="page" struct="grid" model={ props.page.get('_id') } groups={ getGroups() } fields={ props.context.fields } get-field={ getField } { ...getProps() } />
    </div>
  </div>

  <script>
    // export default
    export default class PageModelView {

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // safe update
        this.safeUpdate = () => {
          this.update();
        };

        // bind methods
        this.getField = this.getField.bind(this);
        this.getProps = this.getProps.bind(this);
        this.getGroups = this.getGroups.bind(this);

        // listeners
        this.props.page.on('reload', this.safeUpdate);
        this.props.page.on('data.limit', this.safeUpdate);
        this.props.page.on('data.group', this.safeUpdate);
        this.props.page.on('data.forms', this.safeUpdate);
      }

      /**
       * on before mount
       */
      onBeforeUnmount(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // listeners
        this.props.page.removeListener('reload', this.safeUpdate);
        this.props.page.removeListener('data.limit', this.safeUpdate);
        this.props.page.removeListener('data.group', this.safeUpdate);
        this.props.page.removeListener('data.forms', this.safeUpdate);
      }

      /**
       * get field
       */
      getField({ type }) {
        // return field
        return this.props.fields.find((f) => f.type === type);
      }

      /**
       * get groups
       */
      getGroups() {
        // get group
        if (!this.props.page.get('data.group')) return;

        // get group field
        const actualGroup = this.props.context.fields.find((f) => f.uuid === this.props.page.get('data.group'));

        // check group
        if (!actualGroup) return;

        // return group
        return [...((actualGroup.options || []))].map((option) => {
          // check option
          return {
            ...option,

            key : actualGroup.name || actualGroup.uuid,
          };
        });
      }

      /**
       * get props
       */
      getProps() {
        // clone
        const newProps = { ...(this.props) };

        // delete
        delete newProps.type;
        delete newProps.view;
        delete newProps.item;
        delete newProps.class;
        delete newProps.struct;
        delete newProps.fields;

        // return
        return newProps;
      }

      /**
       * get forms
       */
      getForms() {
        // get forms
        return this.props.page.get('data.forms') || Array.from(this.props.dashup.get('pages').values()).filter((v) => {
          // return forms
          return v.get('type') === 'form' && v.get('data.model') === this.props.page.get('_id');
        });
      }

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-model-view>