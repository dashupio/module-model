<action-model-config>
  <div class={ `card card-flowing card-${props.getAction(props.action).color || 'primary'} mb-3` }>
    <div class="card-header drag">
      <div class="card-icon">
        <i class={ props.getAction(props.action).icon } />
      </div>

      { props.getAction(props.action).title }

    </div>
    <div class="card-body">
      <div class="mb-3">
        <label class="form-label">
          Update
        </label>
        <eden-select data={ getTypes() } ref={ ref('type') } on-change={ (e, v) => onUpdate(v) } />
      </div>

      <div class="mb-3" if={ modelTypes.includes(props.action.update || 'this') }>
        <label class="form-label">
          Model
        </label>
        <eden-select ref={ ref('model') } on-change={ (e, val) => onModel(val) } placeholder="Select Model" data={ getModel() } />
      </div>

      <div class="mb-3" if={ queryTypes.includes(props.action.update || 'this') }>
        <label class="form-label">
          Where
        </label>
        <dashup-query fields={ getFields(null, true) } on-change={ (v) => onQuery(v) } data-value={ props.action.query ? JSON.parse(props.action.query) : [] } />
      </div>

      <hr />

      <div if={ props.action.model || props.action.update === 'this' || !props.action.update } class="card mb-3">
        <div class="card-body pb-2">
          <div each={ (field, i) in props.action.fields } class="d-flex align-items-center mb-2">
            <eden-select placeholder="Select new Field" data={ getFields(field) } on-change={ (e, value) => onFieldUUID(value, i) } placeholder="Set Value" class="flex-1 d-inline-block mr-1" />
            <input class="form-control flex-1" value={ field.value || '' } onchange={ (e) => onFieldValue(e, i) } />
            <button class="btn btn-danger ml-2" onclick={ (e) => onRemoveField(e, i) }>
              <i class="fa fa-times" />
            </button>
          </div>
        </div>
      </div>

      <button if={ props.action.model || props.action.update === 'this' || !props.action.update } class="btn btn-success" onclick={ (e) => onCreateField(e) }>
        Add Field
      </button>
    </div>
  </div>

  <script>
    // export default base
    export default class ActionModelConfig {
      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // set values
        this.modelTypes = ['create', 'update', 'updateOne', 'findOrCreate'];
        this.queryTypes = ['update', 'updateOne', 'findOrCreate'];

        // on type
        this.onUpdate = this.onUpdate.bind(this);
        this.onQuery = this.onQuery.bind(this);
        this.onModel = this.onModel.bind(this);
      }

      /**
       * on change when
       *
       * @param {Event} e
       */
      onUpdate(val) {
        // check value
        if (!val) val = this.refs.type.val();

        // set element
        this.props.set('update', val);
      }

      /**
       * on change timing
       *
       * @param {Event} e
       */
      onQuery(v) {
        // set element
        this.props.set('query', JSON.stringify(v));
      }

      /**
       * on model
       */
      onModel(val) {
        // get value
        if (!val) val = this.refs.model.val();
        
        // set model
        this.props.set('model', val);
      }

      /**
       * on change timing
       *
       * @param {Event} e
       */
      onCreateField(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // create fields
        if (!this.props.action.fields) this.props.action.fields = [];

        // push
        this.props.action.fields.push({});
        
        // set model
        this.props.set('fields', this.props.action.fields);
      }

      /**
       * on change timing
       *
       * @param {Event} e
       */
      onRemoveField(e, i) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // push
        this.props.action.fields.splice(i, 1);
        
        // set model
        this.props.set('fields', this.props.action.fields);
      }

      /**
       * on field name
       */
      onFieldUUID(val, i) {
        // create fields
        this.props.action.fields[i].name = val;

        // set model
        this.props.set('fields', this.props.action.fields);
      }

      /**
       * on field name
       */
      onFieldValue(e, i) {
        // create fields
        this.props.action.fields[i].value = e.target.value;
        
        // set model
        this.props.set('fields', this.props.action.fields);
      }

      /**
       * get when
       */
      getTypes() {
        // return when
        return [['This Model', 'this'], ['Create Model', 'create'], ['Update Model', 'updateOne'], ['Update All Models', 'update'], ['Update or Create Model', 'findOrCreate']].map(([name, value]) => {
          // return type
          return {
            name,
            value,
            selected : (this.props.action.update || 'this') === value,
          };
        });
      }

      /**
       * get model
       */
      getModel() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'model';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.action.model === page.get('_id'),
          };
        });
      }

      /**
       * get fields
       */
      getFields(actualField, fieldsOnly) {
        // model
        const model = (this.props.action.update || 'this') === 'this' ? this.props.page.get('data.trigger.model') : this.props.action.model;

        // reduce
        const fields = Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return page
          return page.get('type') === 'form' && page.get('data.model') === model;
        }).reduce((accum, page) => {
          // check page
          if (!page || !page.get('data.fields')) return accum;

          // loop fields
          accum.push(...page.get('data.fields'));

          // return accum
          return accum;
        }, []);

        // fields
        if (fieldsOnly) return fields;

        // return fields
        return fields.filter((f) => f).map((field) => {
          // return field
          return {
            data     : field,
            text     : field.label,
            value    : field.name || field.uuid,
            selected : actualField.name === (field.name || field.uuid),
          };
        });
      }

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }

  </script>
</action-model-config>