<field-model-input>
  <div class={ props.field.group || 'mb-3' }>
    <label class="form-label" for={ props.getId(props.field.uuid) }>
      { props.field.label }
      <a href="#!" if={ !props.field.label } onclick={ (e) => props.updateAction(e, props.field) }>
        <i>Set Label</i>
      </a>
    </label>
    <input class="form-control" if={ !props.field.model || !props.field.by || !props.field.form } readonly value="Please Complete Configuration" />
    <eden-select if={ props.field.model && props.field.by && props.field.form } ref={ ref('select') } multiple={ props.field.multiple } load={ loadData } placeholder={ props.field.label || 'Set Label' } data={ getData() } name={ props.getName(props.field.uuid) } on-change={ (e) => onChange(e) } />
  </div>
  
  <script>
    // export default
    export default class FieldModelInput {
      /**
       * on before mount
       */
      onBeforeMount() {
        // on change
        this.onChange = this.onChange.bind(this);
        this.loadData = this.loadData.bind(this);
    
        // set initial value
        this.value = this.props.value || [];
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onChange(e) {
        // set value
        this.value = this.val();

        // fix value
        if (!this.value) this.value = [];
        if (!Array.isArray(this.value)) this.value = [this.value];

        console.log(this.value);

        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.value);
        }
      }

      /**
      * return value
      *
      * @return {*}
      */
      val() {
        // ref select
        return this.refs.select.val('data');
      }

      /**
       * load from api
       */
      async loadData(search) {
        // get model
        const model = this.props.dashup.page((this.props.field.model || {}).id || this.props.field.model);

        // check query
        const query = this.props.field.filter ? JSON.parse(this.props.field.filter) : [];

        // create where
        let data = model;

        // loop query
        query.forEach((item) => {
          // add where
          data = data.where(item);
        });

        // inc
        if (search && search.length) {
          // inc
          data = data.inc(this.props.field.by.name || this.props.field.by.uuid, search);
        }

        // add limit
        this.result = await data.limit(25).find();

        // return map
        return this.result.map((item) => {
          // return value
          return {
            name  : item.get(this.props.field.by.name || this.props.field.by.uuid),
            data  : item,
            value : item.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getData() {
        // return value
        return this.value ? this.value.map((item) => {
          // return value
          return {
            name     : item.get ? item.get(this.props.field.by.name || this.props.field.by.uuid) : item[this.props.field.by.name || this.props.field.by.uuid],
            data     : item,
            value    : item.get ? item.get('_id') : item._id,
            selected : true,
          };
        }) : [];
      }

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }
    }
    
  </script>
</field-model-input>