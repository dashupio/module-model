<field-model-config>
  <div>
    <div class="mb-3">
      <label class="form-label">
        Model
      </label>
      <eden-select on-change={ (e, model) => onModel(model) } ref={ ref('model') } placeholder="Select Model" data={ getModel() } />
    </div>
    <div if={ props.field.model } class="mb-3">
      <label class="form-label">
        Model Form
      </label>
      <eden-select on-change={ (e, value) => onForm(value) } ref={ ref('form') } placeholder="Select Form" data={ getForm() } />
    </div>
    <div if={ props.field.form } class="mb-3">
      <label class="form-label">
        Model Title
      </label>
      <eden-select on-change={ (e, value) => onBy(value) } ref={ ref('title') } placeholder="Identifier Field" data={ getBy() } />
    </div>
    <dashup-query on-change={ (v) => onFilter(v) } data-value={ props.field.filter ? JSON.parse(props.field.filter) : [] } fields={ getFields() } label="Filter By" />
  </div>

  <script>

    // export default
    export default class FieldModelField {

      /**
       * on model
       */
      onModel(val) {
        // get value
        if (!val) val = this.refs.model.val();

        // model
        if (!val || !val.length) return;

        // set model
        this.props.set('model', val);
      }

      /**
       * on model
       */
      onForm(val) {
        // get value
        if (!val) val = this.refs.form.val();

        // model
        if (!val || !val.length) return;

        // set model
        this.props.set('form', val);
      }

      /**
       * on model
       */
      onBy(val) {
        // get value
        if (!val) val = this.refs.title.val();

        // model
        if (!val || !val.length) return;

        // set model
        this.props.set('by', val);
      }

      /**
       * on model
       */
      onFilter(filter) {
        // set model
        this.props.set('filter', JSON.stringify(filter));
      }

      /**
       * get value
       */
      getData() {
        // return value
        return this.value ? this.value.map((item) => {
          // return value
          return {
            name     : item[this.props.field.by.name || this.props.field.by.uuid],
            data     : item,
            value    : item._id,
            selected : true,
          };
        }) : [];
      }

      /**
       * get value
       */
      getModel() {
        // model
        let model = this.props.field.model;

        // model
        model = model && model.id ? model.id : model;

        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'model';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : model === page.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getForm() {
        // model
        let model = this.props.field.model;

        // model
        model = model && model.id ? model.id : model;

        // model
        let form = this.props.field.form;

        // model
        form = form && form.id ? form.id : form;

        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form' && page.get('data.model') === model;
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : form === page.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getBy() {
        // by
        let by = this.props.field.by;

        // model
        by = by && by.id ? by.id : by;

        // return value
        return this.getFields().map((field) => {
          // return
          return {
            name     : field.label,
            value    : field.uuid,
            selected : by === field.uuid,
          }
        });
      }

      /**
       * get fields
       */
      getFields() {
        // model
        let form = this.props.field.form;

        // model
        form = form && form.id ? form.id : form;

        // return fields
        return (form ? (this.props.dashup.page(form).get('data.fields') || []) : []);
      }

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</field-model-config>